     1                                  ; haribote-os
     2                                  ; TAB=4
     3                                  
     4                                  BOTPAK	EQU		0x00280000	; bootpack のロード先
     5                                  DSKCAC	EQU		0x00100000	; ディスクキャッシュの場所
     6                                  DSKCAC0	EQU		0x00008000	; ディスクキャッシュの場所(リアルモード)
     7                                  
     8                                  
     9                                  ; BOOT_INFO関係
    10                                  CYLS	EQU		0x0ff0		; ブーとセクタが設定する
    11                                  LEDS	EQU		0x0ff1
    12                                  VMODE	EQU		0x0ff2		; 色数に関する情報。なビットカラーか
    13                                  SCRNX	EQU		0x0ff4		; 画面解像度X (screen x)
    14                                  SCRNY	EQU		0x0ff6		; 画面解像度Y (screen y)
    15                                  VRAM	EQU		0x0ff8		; グラフィックバッファの開始番地
    16                                  
    17                                  		ORG		0xc200		; 0xc200 = 0x8000 + 0x4200. 0x8000 は ブートセクタの先頭がメモリの0x8000にくるようにディスクをメモリに読み込み終わってる
    18                                  
    19                                  ; ビデオモード設定
    20 00000000 B013                    		MOV		AL, 0x13	; VGAグラフィックス, 320x200x8bitカラー
    21 00000002 B400                    		MOV		AH, 0x00
    22 00000004 CD10                    		INT		0x10
    23                                  
    24 00000006 C606F20F08              		MOV		BYTE [VMODE], 8		; 画面モードのメモ
    25 0000000B C706F40F4001            		MOV		WORD [SCRNX], 320	;
    26 00000011 C706F60FC800            		MOV		WORD [SCRNY], 200
    27 00000017 66C706F80F00000A00      		MOV		DWORD [VRAM], 0x000a0000	; グラフィックスモード=0x13 では、VRAMは 0xa0000 ~ 0xaffff の64KB
    28                                  
    29                                  ; キーボードのLED状態をBIOSに教えてもらう
    30                                  
    31 00000020 B402                    		MOV		AH, 0x02	; キーロック&シフト状態取得
    32 00000022 CD16                    		INT		0x16		; keyboard BIOS
    33 00000024 A2F10F                  		MOV		[LEDS], AL	; LED State
    34                                  
    35                                  ; PIC が一切の割り込みを受け付けないようにする
    36                                  ;	AT互換機の使用でhあ、PICの初期化をするなら、
    37                                  ;	こいつをCLI前にやっておかないと、たまにハングアップする
    38                                  ;	PICの初期化はあとでやる
    39                                  
    40 00000027 B0FF                    		MOV		AL, 0xff
    41                                  
    42 00000029 E621                    		OUT		0x21, AL
    43 0000002B 90                      		NOP					; OUT命令が連続するとうまく動かない機種があるため
    44 0000002C E6A1                    		OUT		0xa1, AL
    45                                  
    46 0000002E FA                      		CLI					; さらにCPUレベルでも割り込みを禁止
    47                                  
    48                                  ; CPUから1MB以上のメモリにアクセスできるようにA20GATEを設定
    49                                  	
    50 0000002F E8B500                  		CALL	waitkbdout
    51 00000032 B0D1                    		MOV		AL, 0xd1
    52 00000034 E664                    		OUT		0x64, AL
    53 00000036 E8AE00                  		CALL	waitkbdout
    54 00000039 B0DF                    		MOV		AL, 0xdf	; enable A20
    55 0000003B E660                    		OUT		0x60, AL
    56 0000003D E8A700                  		CALL	waitkbdout
    57                                  
    58                                  ; プロテクトモード移行
    59                                  ; 以下はnask 専用なのでgcc コンパイラオプションで渡すようにする
    60                                  ; [INSTRSET "i486p"]			; i486の命令まで使いたいと言う記述
    61                                  
    62 00000040 0F0116[2A01]            		LGDT	[GDTR0]		; 暫定GDTを設定
    63 00000045 0F20C0                  		MOV		EAX, CR0
    64 00000048 6625FFFFFF7F            		AND		EAX, 0x7fffffff	; bit31を0にする(ページング禁止のため)
    65 0000004E 6683C801                		OR		EAX, 0x00000001	; bit0を1にする(プロテクトモード移行のため)
    66 00000052 0F22C0                  		MOV		CR0, EAX
    67 00000055 EB00                    		JMP		pipelineflush
    68                                  
    69                                  pipelineflush:
    70 00000057 B80800                  		MOV		AX, 1*8			; 読み書き可能セグメント32bit
    71 0000005A 8ED8                    		MOV		DS, AX
    72 0000005C 8EC0                    		MOV		ES, AX
    73 0000005E 8EE0                    		MOV		FS, AX
    74 00000060 8EE8                    		MOV		GS, AX
    75 00000062 8ED0                    		MOV		SS, AX
    76                                  
    77                                  ; bootpackの転送
    78 00000064 66BE[30010000]          		MOV		ESI, bootpack	; 転送元
    79 0000006A 66BF00002800            		MOV		EDI, BOTPAK		; 転送先
    80 00000070 66B900000200            		MOV		ECX, 512*1024/4
    81 00000076 E87500                  		CALL	memcpy
    82                                  
    83                                  ; ついでにディスクデータも本来の位置へ転送
    84                                  ; まずはブーとセクタから
    85                                  		
    86 00000079 66BE007C0000            		MOV		ESI, 0x7c00		; 転送元
    87 0000007F 66BF00001000            		MOV		EDI, DSKCAC		; 転送先
    88 00000085 66B980000000            		MOV		ECX, 512/4
    89 0000008B E86000                  		CALL	memcpy
    90                                  
    91                                  ; 残り全部
    92                                  
    93 0000008E 66BE00820000            		MOV		ESI, DSKCAC0+512	; 転送元
    94 00000094 66BF00021000            		MOV		EDI, DSKCAC+512		; 転送先
    95 0000009A 66B900000000            		MOV		ECX, 0
    96 000000A0 8A0EF00F                		MOV		CL, BYTE [CYLS]
    97 000000A4 6669C900120000          		IMUL	ECX, 512*18*2/4		; シリンダ数からバイト数/4に変換
    98 000000AB 6681E980000000          		SUB		ECX, 512/4			; IPLの分だけ差し引く
    99 000000B2 E83900                  		CALL	memcpy
   100                                  
   101                                  ; asmheadでしなければいけないことは全部し終わったので、
   102                                  ; あとはbootpackに任せる
   103                                  
   104                                  ; bootpackの起動
   105 000000B5 66BB00002800            		MOV		EBX, BOTPAK
   106 000000BB 66678B4B10              		MOV		ECX, [EBX+16]
   107 000000C0 6683C103                		ADD		ECX, 3			; ECX += 3
   108 000000C4 66C1E902                		SHR		ECX, 2			; ECX /= 4
   109 000000C8 7410                    		JZ		skip			; 転送するべきものがない
   110 000000CA 66678B7314              		MOV		ESI, [EBX+20]	; 転送元
   111 000000CF 6601DE                  		ADD		ESI, EBX
   112 000000D2 66678B7B0C              		MOV		EDI, [EBX+12]	; 転送先
   113 000000D7 E81400                  		CALL	memcpy
   114                                  skip:
   115 000000DA 66678B630C              		MOV		ESP, [EBX+12]	; スタック初期値
   116 000000DF 66EA1B0000001000        		JMP		DWORD 2*8:0x0000001b
   117                                  	
   118                                  waitkbdout:
   119 000000E7 E464                    		IN		AL, 0x64
   120 000000E9 2402                    		AND		AL, 0x02
   121 000000EB 75FA                    		JNZ		waitkbdout	; ANDの結果が0でなければmemcpyへ
   122 000000ED C3                      		RET
   123                                  
   124                                  memcpy:
   125 000000EE 66678B06                		MOV		EAX, [ESI]
   126 000000F2 6683C604                		ADD		ESI, 4
   127 000000F6 66678907                		MOV		[EDI], EAX
   128 000000FA 6683C704                		ADD		EDI, 4
   129 000000FE 6683E901                		SUB		ECX, 1
   130 00000102 75EA                    		JNZ		memcpy		; 引き算した血kがが0でなければmemcpyへ
   131 00000104 C3                      		RET
   132                                  ; memcpyはアドレスサイズプリフィクスを入れ忘れなければ、ストリング命令でもかける
   133                                  
   134 00000105 00<rept>                		ALIGNB 16, DB 0
   135                                  
   136                                  GDT0:
   137 00000110 00<rept>                		TIMES	8 DB 0							; Null セレクタ
   138 00000118 FFFF00000092CF00        		DW		0xffff, 0x0000, 0x9200, 0x00cf	; 読み書き可能セグメント32bit
   139 00000120 FFFF0000289A4700        		DW		0xffff, 0x0000, 0x9a28, 0x0047	; 実行可能セグメント32bit(bootpack用)
   140                                  		
   141 00000128 0000                    		DW		0
   142                                  
   143                                  GDTR0:
   144 0000012A 1700                    		DW		8*3-1
   145 0000012C [10010000]              		DD		GDT0
   146                                  
   147                                  		ALIGNB	16, DB 0
   148                                  
   149                                  bootpack:
