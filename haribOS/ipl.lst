     1                                  ; hello-os
     2                                  ; TAB=4
     3                                  
     4                                  CYLS	EQU	10				; CYLS = 10 を定義
     5                                  
     6                                  	ORG		0x7c00			; このプログラムがどこに読み込まれるか
     7                                  
     8                                  ; 以下は標準的なFAT12フォーマットフロッピーディスクのための記述
     9 00000000 EB4E                    	JMP		entry
    10 00000002 90                      	DB		0x90
    11 00000003 48454C4C4F49504C        	DB		"HELLOIPL"		; ブーとセクタの名前を自由に書いてよい (8Byte)
    12 0000000B 0002                    	DW		512				; 1セクタの大きさ (512にしなければならない)
    13 0000000D 01                      	DB		1				; クラスタの大きさ (1セクタにしなければならない)
    14 0000000E 0100                    	DW		1				; FATがどこから始まるか (普通は1セクタ目からにする)
    15 00000010 02                      	DB		2				; FATの個数 (2にしなければならない)
    16 00000011 E000                    	DW		224				; ルートディレクトリ領域の大きさ (通常は224エントリにする)
    17 00000013 400B                    	DW		2880			; このドライブの大きさ (2880セクタにしなければならない)
    18 00000015 F0                      	DB		0xf0			; メディアタイプ (0xf0にしなければならない)
    19 00000016 0900                    	DW		9				; FAT領域の長さ (9セクタにしなければならない)
    20 00000018 1200                    	DW		18				; 1トラックに幾つのセクタがあるか (18セクタにしなければならない)
    21 0000001A 0200                    	DW		2				; ヘッドの数 (2にしなければならない)
    22 0000001C 00000000                	DD		0				; パーティションを使っていないので必ず0
    23 00000020 400B0000                	DD		2880			; このドライブの大きさをもう一度書く
    24 00000024 000029                  	DB		0, 0, 0x29		; よくわからないけどこの値にしておくといいらしい
    25 00000027 FFFFFFFF                	DD		0xffffffff		; 多分ボリュームシリアル番号
    26 0000002B 48454C4C4F2D4F5320-     	DB		"HELLO-OS   "	; ディスクの名前 (11Byte)
    26 00000034 2020               
    27 00000036 4641543132202020        	DB		"FAT12   "		; フォーマットの名前 (8Byte)
    28 0000003E 00<rept>                	TIMES	18 DB 0			; とりあえず18バイト開けておく
    29                                  
    30                                  ; Program Main Body
    31                                  ; 10(シリンダー) * 2(表裏) * 18(sector) * 512(byte/sector) = 184,320バイト = 180KB を読み込む
    32                                  entry:
    33 00000050 B80000                  	MOV		AX, 0			; アキュムレータレジスタの初期化
    34 00000053 8ED0                    	MOV		SS, AX			; SSはスタックセグメント
    35 00000055 BC007C                  	MOV		SP, 0x7c00		; スタックポインタを 0x7c00 へ移動
    36 00000058 8ED8                    	MOV		DS, AX			; DSはデータセグメント
    37                                  
    38                                  	; INT 0x13 はディスクからの読込、書込、セクタのベリファイ、及びシーク
    39                                  	;     読み込み: AH = 0x02
    40                                  	;     書き込み: AH = 0x03
    41                                  	;     ベリファイ: AH = 0x04
    42                                  	;     シーク: AH = 0x0c
    43                                  	; 今回はAH = 0x02 に設定しているの読み込み
    44                                  	; ドライブは0, シリンダは0, セクタは2, ヘッドは表(0) から1セクタ分を読む
    45                                  	; バッファアドレスはディスクからメモリのどこへプログラムをロードするかのアドレス
    46                                  	;     処理するセクタ数->AL, シリンダ番号->CH, セクタ番号->CL,
    47                                  	;     ヘッド番号->DH, ドライブ番号->DL, バッファアドレス->ES:BX
    48 0000005A B82008                  	MOV		AX, 0x0820
    49 0000005D 8EC0                    	MOV		ES, AX			; ESはエクストラセグメント
    50 0000005F B500                    	MOV		CH, 0			; シリンダ0
    51 00000061 B600                    	MOV		DH, 0			; ヘッド0
    52 00000063 B102                    	MOV		CL, 2			; セクタ2
    53                                  
    54                                  readloop:
    55 00000065 BE0000                  	MOV		SI, 0			; 失敗回数を数えるためのレジスタ
    56                                  
    57                                  retry:
    58 00000068 B402                    	MOV		AH, 0x02		; AH=0x02 : ディスク読み込み
    59 0000006A B001                    	MOV		AL, 1			; 1セクタ
    60 0000006C BB0000                  	MOV		BX, 0
    61 0000006F B200                    	MOV		DL, 0x00		; A ドライブ
    62 00000071 CD13                    	INT		0x13			; ディスクBIOSの呼び出し
    63 00000073 7310                    	JNC		next			; carry フラグが1じゃない = 失敗じゃない → fin
    64 00000075 83C601                  	ADD		SI, 1			; 失敗回数のIncrement
    65 00000078 83FE05                  	CMP		SI, 5			; 5回になっているか
    66 0000007B 732E                    	JAE		error			; if SI >= 5 then error. (jump if above or equal)
    67 0000007D B400                    	MOV		AH, 0x00
    68 0000007F B200                    	MOV		DL, 0x00		; Aドライブ
    69 00000081 CD13                    	INT		0x13			; ドライブのリセット
    70 00000083 EBE3                    	JMP		retry			; ループ
    71                                  
    72                                  next:
    73 00000085 8CC0                    	MOV		AX, ES			; アドレスを 0x0020進める. バッファアドレスは ES * 16 + BX
    74 00000087 83C020                  	ADD		AX, 0x0020		; 1セクタ512バイトなので 0x0020 * 16 = 32 * 16 = 512 分だけバッファアドレスを進めたい
    75 0000008A 8EC0                    	MOV		ES, AX			; バッファアドレスで使用されるEXをすすめる 
    76 0000008C 80C101                  	ADD		CL, 1			; CLに1足して、次のセクタをよむ用にする
    77 0000008F 80F912                  	CMP		CL, 18			; CLと18を比較
    78 00000092 76D1                    	JBE		readloop		; CL <= 18 だったらreadloop
    79                                  
    80                                  	; セクタを18まで読み終わった時
    81 00000094 B101                    	MOV		CL, 1			; セクタを1に戻す
    82 00000096 80C601                  	ADD		DH, 1			; ヘッドに1足す => ヘッドを1にして裏面を読む
    83 00000099 80FE02                  	CMP		DH, 2			; 裏面を読み終わっているかどうかのチェック
    84 0000009C 72C7                    	JB		readloop		; DH < 2 だったら readloop
    85                                  
    86                                  	; 裏面を読み終わった時
    87 0000009E B600                    	MOV		DH, 0			; ヘッドを表に戻す
    88 000000A0 80C501                  	ADD		CH, 1			; シリンダ番号をIncrement	
    89 000000A3 80FD0A                  	CMP		CH, CYLS		; シリンダを読み終えたかどうか
    90 000000A6 72BD                    	JB		readloop		; CH < CYLS だっらreadloop
    91                                  
    92                                  fin:
    93 000000A8 F4                      	HLT						; 何かあるまでCPUを停止
    94 000000A9 EBFD                    	JMP		fin				; 無限ループ
    95                                  
    96                                  error:
    97 000000AB BE[C000]                	MOV		SI, msg			; SIはソースインデックス (読み込みインデックス) msgのメモリアドレスをSIに設定
    98                                  
    99                                  putloop:
   100 000000AE 8A04                    	MOV		AL, [SI]		; メモリのSI番地の値を1バイト分 AL (Accumrator Low アキュムレータレジスタの下位8バイト) に読み込む
   101 000000B0 83C601                  	ADD		SI, 1			; ソースインデックスをひとつ進める
   102 000000B3 3C00                    	CMP		AL, 0			; AL (msgメモリないの値) == 0 ならば終了
   103 000000B5 74F1                    	JE		fin
   104 000000B7 B40E                    	MOV		AH, 0x0e		; 1文字表示ファンクション (AHはアキュムレータレジスタの上位8bit)
   105 000000B9 BB0F00                  	MOV		BX, 15			; カラーコード (BXはベースレジスタ)
   106 000000BC CD10                    	INT		0x10			; ビデオBIOS呼び出し
   107 000000BE EBEE                    	JMP		putloop
   108                                  
   109                                  msg:
   110 000000C0 0A0A                    	DB		0x0a, 0x0a
   111 000000C2 6C6F61642C20657272-     	DB		"load, error"
   111 000000CB 6F72               
   112 000000CD 0A                      	DB		0x0a
   113 000000CE 00                      	DB		0
   114                                  
   115 000000CF 00<rept>                	TIMES	0x7dfe-0x7c00-($-$$) DB 0		; 0x7dfeまでを0x00で埋める
   116                                  
   117 000001FE 55AA                    	DB		0x55, 0xaa
   118                                  
   119                                  ; ブート以外の処理
   120                                  
   121                                  ;	DB		0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
   122                                  ;	TIMES	4600 DB 0
   123                                  ;	DB		0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
   124                                  ;	TIMES	1469432 DB 0
